# WOLF MANSION プロジェクト知見 (.clinerules)

## プロジェクト固有のパターン

### 1. ファイル命名規則

- コンポーネントファイル: PascalCase (例: `VillageList.tsx`)
- ユーティリティファイル: cebab-Case (例: `api.ts`)
- ページファイル: Next.jsのApp Routerに従い、`page.tsx`という名前を使用

### 2. コンポーネント実装パターン

- ページコンポーネント: サーバーコンポーネントとして実装し、データ取得を行う
- クライアントコンポーネント: ファイルの先頭に `'use client'` ディレクティブを追加する
- データ取得: `src/components/api/api.ts` の `getRequest` `postRequest` `putRequest` `deleteRequest` 関数を使用する

### 3. API通信パターン

- APIクライアント: `src/components/api/api.ts` に定義された関数を使用
- 型安全性: OpenAPIから生成された型定義を使用して型安全なAPI通信を実現
    - 型定義は `src/lib/openapi-typescript/wolf-mansion/types.d.ts` に記述されたものを使用する
- エラーハンドリング: try-catchブロックでエラーをキャッチし、コンソールにログ出力

## ユーザー設定と好み

### 1. コードスタイル

- ESLintとPrettierを使用して一貫したコードスタイルを維持
- 保存時に自動的にフォーマットされるため、手動でのフォーマットは不要

### 2. UIデザイン

- カラースキーム: ダークテーマ（背景色: #333333, アクセントカラー: 緑色）
    - Modal内の背景色は #222222 を使用
- フォント: Noto_Sans_JPを使用
- アイコン: FontAwesomeを使用
- ボタンスタイル: Submit系のボタン（ログイン、登録、変更など）は右寄せで配置し、fullWidthは使用しない

### 3. 開発ワークフロー

- 開発サーバー: `npm run dev` で起動
- バックエンド型定義更新: バックエンドが起動している状態で特定のコマンドを実行

## 既知の課題と対処法

### 1. APIエラーハンドリング

- 現状: 基本的なエラーハンドリングのみ実装
- 対処法: エラータイプに応じた処理とユーザーへの適切なフィードバックを実装する必要あり

### 2. レスポンシブデザイン

- 現状: 基本的なレスポンシブ対応はしているが、一部のコンポーネントで最適化が不十分
- 対処法: モバイルファーストの設計アプローチを採用し、各画面サイズでのテストを徹底

## プロジェクト特有の知識

### 1. 「人狼館の事件簿村」ルール

- 【足音】と【投票】の2つの要素を使って推理・説得するゲーム
- 夜のフェーズで発生する【足音】が重要な推理材料となる
- 役職ごとに特定のアクションが可能で、それぞれ異なる【足音】を発生させる

### 2. ゲームの進行フロー

- 村の作成 → プレイヤーの参加 → ゲーム開始 → 昼夜のサイクル → ゲーム終了
- 昼: 投票と能力行使のセット
- 夜: 投票による処刑実行、役職ごとのアクション実行と【足音】の発生

### 3. バックエンドとの連携

- RESTful APIを使用してバックエンドと通信
- 認証はクッキーベースで実装
- 一部のAPIエンドポイントは認証が必要

## 開発環境のセットアップ

1. リポジトリのクローン
2. 依存関係のインストール: `npm install`
3. 開発サーバーの起動: `npm run dev`
4. ブラウザでアクセス: http://localhost:3000/wolf-mansion

## 重要なファイルとディレクトリ

- `src/app/page.tsx`: メインページ
- `src/components/api/api.ts`: APIクライアント
- `src/lib/openapi-typescript/wolf-mansion/types.d.ts`: API型定義

このファイルは、プロジェクトの進行に伴って継続的に更新され、新しい知見や重要なパターンが追加されます。
