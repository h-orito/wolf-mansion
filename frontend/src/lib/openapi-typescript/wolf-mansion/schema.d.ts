/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/village/{villageId}/my-name": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["apiChangeName"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/face-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["apiFaceType"];
        post: operations["apiPostFaceType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/random-keyword/{keywordId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiRandomKeywordIndex"];
        put: operations["apiPutRandomKeyword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/village/{villageId}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/village/{villageId}/action-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["actionConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSetVote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["villageUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/switch-participate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSwitchParticipate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/shorten-epilogue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiShorten"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiStoreSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/say": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/say-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSayConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/participate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiParticipate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/notification-setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSaveNotification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/memo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiMemo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/kick": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiKick"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/extend-epilogue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiExtend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/creator-say": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiCreatorSay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/creator-say-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSayConfirm_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/confirm-participate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiConfirmParticipate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiCommit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiCancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/action-confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiActionConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/ability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiSetAbility"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-detail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiUserDetail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/new-village/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiCreateVillage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/new-village/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiNewVillageConfirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/new-random-keyword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiRegisterRandomKeyword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/new-player": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiCreatePlayer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["index"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/delete-random-keyword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiDeleteRandomKeyword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/village/{villageId}/leave": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["apiLeave"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/village/getFootstepList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFootstepList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/village/getAttackTargetList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAttackTargetList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/village-record/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["villageRecordList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/village-record/latest-vid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["latestVillageRecordVid"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skill/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["skillList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/skill-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["index_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruiting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["recruiting"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getSelectableCharaList/{villageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSelectableCharaList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getFaceImgUrl/{villageId}/{faceTypeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFaceImgUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getCharacterList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCharacterList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiVillage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getParticipants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDayMessageList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/latest-message-datetime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLatestMessageDatetime"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/footstep-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["footstepList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/attack-target-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["attackTargetList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/anchor-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["villageMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village/{villageId}/anchor-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAnchorMessage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/village-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["villageList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiUserList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/random-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiRandomMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chara-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiCharaGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chara-group/{charaGroupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiCharaGroup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/village/{villageId}/player": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["apiPlayer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/village/{villageId}/player": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["player"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        VillageChangeNameForm: {
            name: string;
            shortName: string;
        };
        FaceTypeForm: {
            code: string;
            name: string;
            display?: boolean;
            url?: string;
        };
        VillageFaceTypeModifyForm: {
            faceTypeList?: components["schemas"]["FaceTypeForm"][];
        };
        RandomKeywordForm: {
            keyword: string;
            message: string;
        };
        VillageSayForm: {
            message: string;
            messageType: string;
            /** Format: int32 */
            secretSayTargetCharaId?: number;
            convertDisable?: boolean;
            faceType?: string;
        };
        VillageMessageContent: {
            playerName?: string;
            characterName?: string;
            /** Format: int32 */
            characterId?: number;
            characterImageUrl?: string;
            messageType: string;
            /** Format: int32 */
            messageNumber?: number;
            messageContent: string;
            /** Format: date-time */
            messageDatetime: string;
            /** Format: int32 */
            width?: number;
            /** Format: int32 */
            height?: number;
            targetCharacterName?: string;
            isConvertDisable: boolean;
            isBigEars: boolean;
            isRainbow: boolean;
            isLoud: boolean;
            canReply: boolean;
            canSecret: boolean;
            minHeightCss: string;
        };
        VillageSayConfirmContent: {
            message: components["schemas"]["VillageMessageContent"];
            randomKeywords: string;
        };
        VillageActionForm: {
            myself: string;
            target?: string;
            message: string;
            convertDisable?: boolean;
        };
        VillageVoteForm: {
            /** Format: int32 */
            targetCharaId: number;
        };
        VillageUpdateResponse: {
            login: boolean;
            /** Format: int32 */
            latestDay: number;
        };
        MessageTypeSayRestrictForm: {
            messageTypeName?: string;
            messageTypeCode?: string;
            restrict?: boolean;
            /** Format: int32 */
            count?: number;
            /** Format: int32 */
            length?: number;
        };
        RandomOrganizationCampForm: {
            campCode?: string;
            campName?: string;
            /** Format: int32 */
            minNum: number;
            /** Format: int32 */
            maxNum?: number;
            /** Format: int32 */
            allocation: number;
            /** Format: int32 */
            reincarnationAllocation: number;
            skillAllocation: components["schemas"]["RandomOrganizationSkillForm"][];
        };
        RandomOrganizationSkillForm: {
            skillCode?: string;
            skillName?: string;
            /** Format: int32 */
            minNum: number;
            /** Format: int32 */
            maxNum?: number;
            /** Format: int32 */
            allocation: number;
            /** Format: int32 */
            reincarnationAllocation: number;
        };
        RandomOrganizationWolfForm: {
            /** Format: int32 */
            minNum: number;
            /** Format: int32 */
            maxNum?: number;
        };
        SkillSayRestrictForm: {
            skillName?: string;
            skillCode?: string;
            restrict?: boolean;
            /** Format: int32 */
            count?: number;
            /** Format: int32 */
            length?: number;
        };
        VillageSettingForm: {
            villageName: string;
            /** Format: int32 */
            startPersonMinNum: number;
            /** Format: int32 */
            personMaxNum: number;
            /** Format: int32 */
            dayChangeIntervalHours?: number;
            /** Format: int32 */
            dayChangeIntervalMinutes?: number;
            /** Format: int32 */
            dayChangeIntervalSeconds?: number;
            /** Format: int32 */
            startYear?: number;
            /** Format: int32 */
            startMonth?: number;
            /** Format: int32 */
            startDay?: number;
            /** Format: int32 */
            startHour?: number;
            /** Format: int32 */
            startMinute?: number;
            welcomeRange?: string;
            ageLimit?: string;
            openVote: boolean;
            availableSameWolfAttack: boolean;
            openSkillInGrave: boolean;
            visibleGraveSpectateMessage: boolean;
            allowedSecretSayCode: string;
            availableSpectate: boolean;
            availableSuddonlyDeath: boolean;
            availableCommit: boolean;
            availableGuardSameTarget: boolean;
            availableAction: boolean;
            organization?: string;
            randomOrganization: boolean;
            reincarnationSkillAll: boolean;
            campAllocationList?: components["schemas"]["RandomOrganizationCampForm"][];
            wolfAllocation?: components["schemas"]["RandomOrganizationWolfForm"];
            dummyDay1Message?: string;
            joinPassword?: string;
            sayRestrictList: components["schemas"]["SkillSayRestrictForm"][];
            skillSayRestrictList: components["schemas"]["MessageTypeSayRestrictForm"][];
            rpSayRestrictList: components["schemas"]["MessageTypeSayRestrictForm"][];
        };
        VillageParticipateForm: {
            /** Format: int32 */
            charachipId?: number;
            /** Format: int32 */
            charaId?: number;
            /** Format: binary */
            charaImageFile?: string;
            charaName: string;
            charaShortName: string;
            requestedSkill?: string;
            secondRequestedSkill?: string;
            joinMessage: string;
            joinPassword?: string;
            spectator?: boolean;
            /** Format: int32 */
            personNumber?: number;
        };
        VillageNotificationForm: {
            webhookUrl: string;
            villageStart?: boolean;
            villageDaychange?: boolean;
            villageEpilogue?: boolean;
            secretSay?: boolean;
            abilitySay?: boolean;
            anchorSay?: boolean;
            keyword?: string;
        };
        VillageMemoForm: {
            memo?: string;
        };
        VillageKickForm: {
            /** Format: int32 */
            charaId: number;
        };
        VillageFaceTypeForm: {
            faceTypeName: string;
            /** Format: binary */
            image?: string;
        };
        VillageCommitForm: {
            commit: boolean;
        };
        VillageAbilityForm: {
            /** Format: int32 */
            attackerCharaId?: number;
            /** Format: int32 */
            targetCharaId?: number;
            footstep?: string;
        };
        UserDetailForm: {
            twitterUserName?: string;
            introduction?: string;
        };
        NewVillageForm: {
            villageName: string;
            /** Format: int32 */
            startPersonMinNum: number;
            /** Format: int32 */
            personMaxNum: number;
            /** Format: int32 */
            dayChangeIntervalHours?: number;
            /** Format: int32 */
            dayChangeIntervalMinutes?: number;
            /** Format: int32 */
            dayChangeIntervalSeconds?: number;
            /** Format: int32 */
            startYear?: number;
            /** Format: int32 */
            startMonth?: number;
            /** Format: int32 */
            startDay?: number;
            /** Format: int32 */
            startHour?: number;
            /** Format: int32 */
            startMinute?: number;
            welcomeRange?: string;
            ageLimit?: string;
            openVote: boolean;
            possibleSkillRequest: boolean;
            availableSameWolfAttack: boolean;
            openSkillInGrave: boolean;
            visibleGraveSpectateMessage: boolean;
            shouldOriginalImage: boolean;
            characterSetId?: number[];
            /** Format: int32 */
            dummyCharaId?: number;
            /** Format: binary */
            dummyCharaImageFile?: string;
            dummyCharaName: string;
            dummyCharaShortName: string;
            dummyJoinMessage: string;
            dummyDay1Message?: string;
            joinPassword?: string;
            availableSpectate: boolean;
            creatorIsProducer: boolean;
            availableSuddonlyDeath: boolean;
            availableCommit: boolean;
            availableGuardSameTarget: boolean;
            availableAction: boolean;
            organization?: string;
            randomOrganization: boolean;
            reincarnationSkillAll: boolean;
            campAllocationList?: components["schemas"]["RandomOrganizationCampForm"][];
            wolfAllocation?: components["schemas"]["RandomOrganizationWolfForm"];
            allowedSecretSayCode: string;
            sayRestrictList: components["schemas"]["SkillSayRestrictForm"][];
            skillSayRestrictList: components["schemas"]["MessageTypeSayRestrictForm"][];
            rpSayRestrictList: components["schemas"]["MessageTypeSayRestrictForm"][];
        };
        NewVillageResponse: {
            /** Format: int32 */
            villageId: number;
        };
        PlayerCreateForm: {
            userId: string;
            password: string;
        };
        LoginForm: {
            userId: string;
            password: string;
            error?: boolean;
        };
        PlayerView: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        VillageLeaveForm: {
            /** Format: int32 */
            villagePlayerId: number;
        };
        VillageGetFootstepListForm: {
            /** Format: int32 */
            villageId: number;
            /** Format: int32 */
            charaId?: number;
            /** Format: int32 */
            targetCharaId?: number;
        };
        VillageGetFootstepListContent: {
            footstepList: string[];
        };
        VillageGetAttackTargetListForm: {
            /** Format: int32 */
            villageId: number;
            /** Format: int32 */
            charaId: number;
        };
        OptionContent: {
            name: string;
            value: string;
        };
        VillageGetAttackTargetListContent: {
            attackTargetList: components["schemas"]["OptionContent"][];
        };
        VillageRecordListForm: {
            vid?: number[];
        };
        VillageParticipantRecord: {
            user_id: string;
            character_name: string;
            skill_name?: string;
            spectator: boolean;
            win?: boolean;
            dead: boolean;
            /** Format: int32 */
            dead_day?: number;
            dead_reason?: string;
            camp_name?: string;
        };
        VillageRecord: {
            /** Format: int32 */
            id: number;
            name: string;
            status: string;
            organization: string;
            /** Format: int32 */
            interval_seconds: number;
            start_datetime?: string;
            prologue_datetime: string;
            epilogue_datetime?: string;
            /** Format: int32 */
            epilogue_day?: number;
            url?: string;
            win_camp_name?: string;
            participant_list: components["schemas"]["VillageParticipantRecord"][];
        };
        VillageRecordListContent: {
            list: components["schemas"]["VillageRecord"][];
        };
        VillageRecordLatestVidContent: {
            /** Format: int32 */
            vid: number;
        };
        CampSkillName: {
            camp_name: string;
            skill_name_list: string[];
        };
        SkillListContent: {
            list: components["schemas"]["CampSkillName"][];
        };
        SkillForm: {
            tags?: string;
            name?: string;
            /** Format: int32 */
            villageId?: number;
        };
        RecruitingContent: {
            villageList: components["schemas"]["RecruitingVillage"][];
        };
        RecruitingVillage: {
            /** Format: int32 */
            villageId?: number;
            villageNumber: string;
            villageName: string;
            participateNum: string;
            spectateNum: string;
            daychangeDatetime: string;
            daychangeInterval: string;
            charaset: string;
            restrict: string;
            status: string;
            url: string;
        };
        GetSelectableCharaListForm: {
            /** Format: int32 */
            charachipId: number;
        };
        VillageCharaContent: {
            /** Format: int32 */
            id: number;
            name: string;
            shortName: string;
            url: string;
            /** Format: int32 */
            width: number;
            /** Format: int32 */
            height: number;
        };
        CharacterListForm: {
            charaGroupId?: number[];
        };
        Chara: {
            /** Format: int32 */
            id: number;
            name: string;
            shortName: string;
            defaultJoinMessage?: string;
            defaultFirstdayMessage?: string;
            size: components["schemas"]["CharaSize"];
            images: components["schemas"]["CharaImages"];
        };
        CharaImage: {
            faceType: components["schemas"]["FaceType"];
            url: string;
            isDisplay: boolean;
        };
        CharaImages: {
            list: components["schemas"]["CharaImage"][];
        };
        CharaSize: {
            /** Format: int32 */
            width: number;
            /** Format: int32 */
            height: number;
        };
        FaceType: {
            code: string;
            name: string;
        };
        AbilityType: {
            code: string;
            name: string;
            setMessageType: components["schemas"]["MessageType"];
        };
        Camp: {
            code: string;
            name: string;
            isFoxs: boolean;
            isLovers: boolean;
            isCriminals: boolean;
            isVillagers: boolean;
            isWolfs: boolean;
        };
        CampAllocation: {
            camp: components["schemas"]["Camp"];
            /** Format: int32 */
            min: number;
            /** Format: int32 */
            max?: number;
            /** Format: int32 */
            initAllocation: number;
            /** Format: int32 */
            reincarnationAllocation: number;
        };
        DeadHistoriesView: {
            list: components["schemas"]["DeadHistoryView"][];
        };
        DeadHistoryView: {
            /** Format: int32 */
            day: number;
            isDead: boolean;
            reason?: components["schemas"]["DeadReasonView"];
        };
        DeadReasonView: {
            code: string;
            name: string;
        };
        DeadView: {
            isDead: boolean;
            /** Format: int32 */
            deadDay?: number;
            reason?: components["schemas"]["DeadReasonView"];
            histories: components["schemas"]["DeadHistoriesView"];
        };
        MessageType: {
            code: string;
            name: string;
            isOwlViewableType: boolean;
            isSayType: boolean;
        };
        Room: {
            /** Format: int32 */
            number: number;
            histories: components["schemas"]["RoomHistories"];
        };
        RoomHistories: {
            list: components["schemas"]["RoomHistory"][];
        };
        RoomHistory: {
            /** Format: int32 */
            day: number;
            /** Format: int32 */
            number: number;
        };
        RoomSize: {
            /** Format: int32 */
            width: number;
            /** Format: int32 */
            height: number;
        };
        SecretSayRange: {
            code: string;
            name: string;
        };
        Skill: {
            code: string;
            name: string;
            shortName: string;
            histories: components["schemas"]["SkillHistories"];
            isRequestable: boolean;
            isWolfCount: boolean;
            ability?: components["schemas"]["AbilityType"];
            isNoSound: boolean;
            isNoDeadByAttack: boolean;
            isShogiWolf: boolean;
            isViewableWolfCharaName: boolean;
            isSayableWerewolfSay: boolean;
            isFoxCount: boolean;
            isViewableSympathizeSay: boolean;
            isDivineResultWolf: boolean;
            isDeadByDivine: boolean;
            isCounterDeadByInvestigate: boolean;
            isPsychicResultWolf: boolean;
            isOpenSkill: boolean;
            isViewableWerewolfSay: boolean;
            isViewableAttackMessage: boolean;
            isViewableCoronerMessage: boolean;
            isViewableDivineMessage: boolean;
            isViewableLoversSay: boolean;
            isSayableSympathizeSay: boolean;
            isViewableTelepathy: boolean;
            isSayableTelepathy: boolean;
            isViewableFoxMessage: boolean;
            isViewableGuruMessage: boolean;
            isViewableInvestigateMessage: boolean;
            isViewableLoversMessage: boolean;
            isViewablePsychicMessage: boolean;
            isViewableWiseMessage: boolean;
            isNoCount: boolean;
            isCounterDeadByDivine: boolean;
            isRevivable: boolean;
        };
        SkillAllocation: {
            skill: components["schemas"]["Skill"];
            /** Format: int32 */
            min: number;
            /** Format: int32 */
            max?: number;
            /** Format: int32 */
            initAllocation: number;
            /** Format: int32 */
            reincarnationAllocation: number;
        };
        SkillHistories: {
            list: components["schemas"]["SkillHistory"][];
        };
        SkillHistory: {
            skill: components["schemas"]["Skill"];
            /** Format: int32 */
            day: number;
        };
        VillageCharaSetting: {
            isOriginalCharachip: boolean;
            /** Format: int32 */
            dummyCharaId: number;
            dummyDay1Message?: string;
            charachipIds: number[];
        };
        VillageDay: {
            /** Format: int32 */
            day: number;
            /** Format: date-time */
            dayChangeDatetime: string;
        };
        VillageDayRoom: {
            /** Format: int32 */
            roomNumber: number;
            /** Format: int32 */
            x: number;
            /** Format: int32 */
            y: number;
            /** Format: int32 */
            participantId?: number;
            isDead?: boolean;
            /** Format: int32 */
            deadDay?: number;
            deadReason?: components["schemas"]["DeadReasonView"];
        };
        VillageDaySituation: {
            /** Format: int32 */
            day: number;
            rooms: components["schemas"]["VillageDayRoom"][];
            footsteps: string[];
            votes: components["schemas"]["Vote"][];
        };
        VillageDays: {
            list: components["schemas"]["VillageDay"][];
        };
        VillageOrganize: {
            fixedOrganization: string;
            randomOrganization: components["schemas"]["VillageRandomOrganize"];
        };
        VillageParticipantName: {
            name: string;
            shortName: string;
        };
        VillageParticipantView: {
            /** Format: int32 */
            id: number;
            charaName: components["schemas"]["VillageParticipantName"];
            chara: components["schemas"]["Chara"];
            room?: components["schemas"]["Room"];
            dead: components["schemas"]["DeadView"];
        };
        VillageParticipantsView: {
            /** Format: int32 */
            count: number;
            list: components["schemas"]["VillageParticipantView"][];
        };
        VillageRandomOrganize: {
            skillAllocation: components["schemas"]["SkillAllocation"][];
            campAllocation: components["schemas"]["CampAllocation"][];
            wolfAllocation?: components["schemas"]["WolfAllocation"];
        };
        VillageRule: {
            isOpenVote: boolean;
            isPossibleSkillRequest: boolean;
            isAvailableSpectate: boolean;
            isCreatorIsProducer: boolean;
            isAvailableSameWolfAttack: boolean;
            isOpenSkillInGrave: boolean;
            isVisibleGraveSpectateMessage: boolean;
            isAvailableSuddenlyDeath: boolean;
            isAvailableCommit: boolean;
            isAvailableGuardSameTarget: boolean;
            isAvailableAction: boolean;
            isRandomOrganization: boolean;
            isReincarnationSkillAll: boolean;
            secretSayRange: components["schemas"]["SecretSayRange"];
        };
        VillageSettingView: {
            chara: components["schemas"]["VillageCharaSetting"];
            rule: components["schemas"]["VillageRule"];
            organize: components["schemas"]["VillageOrganize"];
        };
        VillageStatus: {
            code: string;
            name: string;
            isPrologue: boolean;
            isCanceled: boolean;
            isSettled: boolean;
            isProgress: boolean;
            isEpilogue: boolean;
            isNotFinished: boolean;
            isSettleOrCanceled: boolean;
            isFinished: boolean;
        };
        VillageView: {
            /** Format: int32 */
            id: number;
            name: string;
            status: components["schemas"]["VillageStatus"];
            roomSize?: components["schemas"]["RoomSize"];
            participants: components["schemas"]["VillageParticipantsView"];
            days: components["schemas"]["VillageDays"];
            setting: components["schemas"]["VillageSettingView"];
            /** Format: int32 */
            epilogueDay?: number;
        };
        Vote: {
            /** Format: int32 */
            day: number;
            /** Format: int32 */
            charaId: number;
            /** Format: int32 */
            targetCharaId: number;
        };
        WholeVillageSituationsContent: {
            village: components["schemas"]["VillageView"];
            participantIdToChara: {
                [key: string]: components["schemas"]["Chara"];
            };
            charaIdToParticipantId: {
                [key: string]: number;
            };
            days: components["schemas"]["VillageDaySituation"][];
        };
        WolfAllocation: {
            /** Format: int32 */
            min: number;
            /** Format: int32 */
            max?: number;
        };
        VillageParticipantContent: {
            name: string;
            playerName: string;
            isSpectator: boolean;
            deadStatus: string;
            skillName: string;
            winStatus: string;
        };
        VillageParticipantsContent: {
            list: components["schemas"]["VillageParticipantContent"][];
        };
        VillageGetMessageListForm: {
            /** Format: int32 */
            day?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            pageNum?: number;
            toParticipantIds?: string;
            types?: string;
            participantIds?: string;
            keywords?: string;
            isPaging?: boolean;
            isDispLatest?: boolean;
        };
        VillageMessageListContent: {
            messageList: components["schemas"]["VillageMessageContent"][];
            villageStatusMessage?: string;
            commitStatusMessage?: string;
            suddenlyDeathMessage?: string;
            /** Format: int32 */
            latestDay: number;
            /** Format: int32 */
            allPageCount: number;
            isExistPrePage: boolean;
            isExistNextPage: boolean;
            /** Format: int32 */
            currentPageNum?: number;
            isDispLatest: boolean;
            pageNumList: number[];
            latestMessageDatetime?: string;
        };
        VillageLatestMessageDatetimeContent: {
            latestMessageDatetime: string;
        };
        FootStepListRequest: {
            /** Format: int32 */
            charaId?: number;
            /** Format: int32 */
            targetCharaId: number;
        };
        AttackTargetListRequest: {
            /** Format: int32 */
            charaId: number;
        };
        VillageMessageForm: {
            anchors: string;
        };
        VillageAnchorMessagesContent: {
            messageList: components["schemas"]["VillageMessageContent"][];
        };
        VillageGetAnchorMessageForm: {
            /** Format: int32 */
            messageNumber: number;
            messageType: string;
        };
        VillageAnchorMessageContent: {
            message?: components["schemas"]["VillageMessageContent"];
        };
        CharachipContent: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        SkillContent: {
            code: string;
            name: string;
        };
        VillageListContent: {
            villageList: components["schemas"]["VillageListVillage"][];
            charachipList: components["schemas"]["CharachipContent"][];
            skillList: components["schemas"]["SkillContent"][];
        };
        VillageListVillage: {
            /** Format: int32 */
            villageId: number;
            villageNumber: string;
            villageName: string;
            participateNum: string;
            status: string;
        };
        ApiUserRequest: {
            userName: string;
        };
        PlayerCampRecord: {
            campName: string;
            stats: components["schemas"]["PlayerRecord"];
        };
        PlayerParticipateVillage: {
            /** Format: int32 */
            villageId: number;
            villageName: string;
            characterName: string;
            characterImgUrl: string;
            /** Format: int32 */
            characterImgWidth: number;
            /** Format: int32 */
            characterImgHeight: number;
            skillName: string;
            liveStatus: string;
            campName: string;
            winStatus: string;
        };
        PlayerRecord: {
            /** Format: int32 */
            participateNum: number;
            /** Format: int32 */
            winNum: number;
            /** Format: float */
            winRate: number;
        };
        PlayerRecordsContent: {
            twitterUserName?: string;
            introduction?: string;
            wholeStats: components["schemas"]["PlayerRecord"];
            campStatsList: components["schemas"]["PlayerCampRecord"][];
            skillStatsList: components["schemas"]["PlayerSkillRecord"][];
            participateVillageList: components["schemas"]["PlayerParticipateVillage"][];
            spectateVillageList: components["schemas"]["PlayerParticipateVillage"][];
        };
        PlayerSkillRecord: {
            skillName: string;
            stats: components["schemas"]["PlayerRecord"];
        };
        UserListForm: {
            /** Format: int32 */
            pageNum?: number;
        };
        PlayerContent: {
            name: string;
        };
        PlayerListContent: {
            players: components["schemas"]["PlayerContent"][];
            /** Format: int32 */
            allPageCount: number;
            isExistPrePage: boolean;
            isExistNextPage: boolean;
            /** Format: int32 */
            currentPageNum: number;
            pageNumList: number[];
        };
        RandomContent: {
            message: string;
        };
        RandomKeyword: {
            /** Format: int32 */
            id: number;
            keyword: string;
            contents: components["schemas"]["RandomContent"][];
        };
        RandomKeywords: {
            list: components["schemas"]["RandomKeyword"][];
        };
        Charachip: {
            /** Format: int32 */
            id: number;
            name: string;
            designer?: components["schemas"]["Designer"];
            descriptionUrl?: string;
            isAvailableChangeName: boolean;
            charas: components["schemas"]["Charas"];
        };
        Charachips: {
            list: components["schemas"]["Charachip"][];
        };
        Charas: {
            list: components["schemas"]["Chara"][];
        };
        Designer: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        VillageCharaPlayerContent: {
            charaName: string;
            playerName: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    apiChangeName: {
        parameters: {
            query: {
                body: components["schemas"]["VillageChangeNameForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiFaceType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageFaceTypeModifyForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiPostFaceType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageFaceTypeForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiRandomKeywordIndex: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                keywordId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RandomKeyword"];
                };
            };
        };
    };
    apiPutRandomKeyword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                keywordId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RandomKeywordForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    confirm: {
        parameters: {
            query: {
                sayForm: components["schemas"]["VillageSayForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageSayConfirmContent"];
                };
            };
        };
    };
    actionConfirm: {
        parameters: {
            query: {
                actionForm: components["schemas"]["VillageActionForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageSayConfirmContent"];
                };
            };
        };
    };
    apiSetVote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageVoteForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    villageUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageUpdateResponse"];
                };
            };
        };
    };
    apiSwitchParticipate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiShorten: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiStoreSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageSettingForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiSay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageSayForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiSayConfirm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageSayForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageSayConfirmContent"];
                };
            };
        };
    };
    apiParticipate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageParticipateForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiSaveNotification: {
        parameters: {
            query: {
                notificationForm: components["schemas"]["VillageNotificationForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiMemo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageMemoForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiKick: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageKickForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiExtend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiCreatorSay: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageSayForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiSayConfirm_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageSayForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiConfirmParticipate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageParticipateForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiCommit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageCommitForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiCancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiAction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageActionForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiActionConfirm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageActionForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageSayConfirmContent"];
                };
            };
        };
    };
    apiSetAbility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageAbilityForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiUserDetail: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserDetailForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiCreateVillage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewVillageForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NewVillageResponse"];
                };
            };
        };
    };
    apiNewVillageConfirm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewVillageForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiRegisterRandomKeyword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RandomKeywordForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiCreatePlayer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                id_register?: boolean;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayerCreateForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PlayerView"];
                };
            };
        };
    };
    apiDeleteRandomKeyword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RandomKeywordForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    apiLeave: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VillageLeaveForm"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFootstepList: {
        parameters: {
            query: {
                form: components["schemas"]["VillageGetFootstepListForm"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageGetFootstepListContent"];
                };
            };
        };
    };
    getAttackTargetList: {
        parameters: {
            query: {
                form: components["schemas"]["VillageGetAttackTargetListForm"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageGetAttackTargetListContent"];
                };
            };
        };
    };
    villageRecordList: {
        parameters: {
            query: {
                form: components["schemas"]["VillageRecordListForm"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageRecordListContent"];
                };
            };
        };
    };
    latestVillageRecordVid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageRecordLatestVidContent"];
                };
            };
        };
    };
    skillList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SkillListContent"];
                };
            };
        };
    };
    index_1: {
        parameters: {
            query: {
                form: components["schemas"]["SkillForm"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string[];
                };
            };
        };
    };
    recruiting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RecruitingContent"];
                };
            };
        };
    };
    getSelectableCharaList: {
        parameters: {
            query: {
                form: components["schemas"]["GetSelectableCharaListForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageCharaContent"][];
                };
            };
        };
    };
    getFaceImgUrl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
                faceTypeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getCharacterList: {
        parameters: {
            query: {
                form: components["schemas"]["CharacterListForm"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Chara"][];
                };
            };
        };
    };
    apiVillage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["WholeVillageSituationsContent"];
                };
            };
        };
    };
    getParticipants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageParticipantsContent"];
                };
            };
        };
    };
    getDayMessageList: {
        parameters: {
            query: {
                form: components["schemas"]["VillageGetMessageListForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageMessageListContent"];
                };
            };
        };
    };
    getLatestMessageDatetime: {
        parameters: {
            query: {
                form: components["schemas"]["VillageGetMessageListForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageLatestMessageDatetimeContent"];
                };
            };
        };
    };
    footstepList: {
        parameters: {
            query: {
                body: components["schemas"]["FootStepListRequest"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageGetFootstepListContent"];
                };
            };
        };
    };
    attackTargetList: {
        parameters: {
            query: {
                form: components["schemas"]["AttackTargetListRequest"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageGetAttackTargetListContent"];
                };
            };
        };
    };
    villageMessage: {
        parameters: {
            query: {
                form: components["schemas"]["VillageMessageForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageAnchorMessagesContent"];
                };
            };
        };
    };
    getAnchorMessage: {
        parameters: {
            query: {
                form: components["schemas"]["VillageGetAnchorMessageForm"];
            };
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageAnchorMessageContent"];
                };
            };
        };
    };
    villageList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["VillageListContent"];
                };
            };
        };
    };
    apiUser: {
        parameters: {
            query: {
                request: components["schemas"]["ApiUserRequest"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PlayerRecordsContent"];
                };
            };
        };
    };
    apiUserList: {
        parameters: {
            query: {
                form: components["schemas"]["UserListForm"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PlayerListContent"];
                };
            };
        };
    };
    apiRandomMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RandomKeywords"];
                };
            };
        };
    };
    apiCharaGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Charachips"];
                };
            };
        };
    };
    apiCharaGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                charaGroupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Charachip"];
                };
            };
        };
    };
    apiPlayer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["VillageCharaPlayerContent"][];
                };
            };
        };
    };
    player: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                villageId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["VillageCharaPlayerContent"][];
                };
            };
        };
    };
}
