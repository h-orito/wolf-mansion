# /---------------------------------------------------------------------------
# classificationDefinitionMap: (NotRequired - Default map:{})
#
# The definition of classification.
#
# Specification:
# map: {
#     [classification-name] = list:{
#         ; map:{
#             ; topComment=[comment]; codeType=[String(default) or Number or Boolean]
#             ; undefinedHandlingType=[EXCEPTION or LOGGING(default) or ALLOWED]
#             ; isUseDocumentOnly=[true or false(default)]
#             ; isSuppressAutoDeploy=[true or false(default)]
#             ; groupingMap = map:{
#                 ; [group-name] = map:{
#                     ; groupComment=[comment]
#                     ; elementList=list:{[the list of classification element's name]}
#                 }
#             }
#         }
#         # classification elements for implicit classification
#         ; map:{
#             ; code=[code]; name=[name]; alias=[alias]; comment=[comment]
#             ; sisterCode=[code or code-list]; subItemMap=map:{[free-map]}
#         }
#         # settings for table classification
#         ; map:{
#             ; table=[table-name]
#             ; code=[column-name for code]; name=[column-name for name]
#             ; alias=[column-name for alias]; comment=[column-name for comment]}
#             ; where=[condition for select]; orderBy=[column-name for ordering]
#             ; exceptCodeList=[the list of except code]
#         }
#     }
# }
#
# *The line that starts with '#' means comment-out.
#
map:{
    # example for implicit classification
    #; Flg = list:{
    #    ; map:{topComment=general boolean classification for every flg-column; codeType=Number}
    #    ; map:{code=1; name=True ; alias=Checked  ; comment=means yes; sisterCode=true}
    #    ; map:{code=0; name=False; alias=Unchecked; comment=means no ; sisterCode=false}
    #}
    # example for table classification
    #; MemberStatus = list:{
    #    ; map:{topComment=status of member from entry to withdrawal; codeType=String}
    #    ; map:{
    #        ; table=MEMBER_STATUS
    #        ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
    #        ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
    #    }
    #}
    ; Flg = list:{
        ; map:{topComment=フラグを示す; codeType=Boolean}
        ; map:{
             ; code=true; name=True ; alias=はい ; comment=有効を示す
        }
        ; map:{
             ; code=false; name=False; alias=いいえ ; comment=無効を示す
        }
    }
    ; Authority = list:{
        ; map:{topComment=権限; codeType=String}
        ; map:{
            ; table=AUTHORITY
            ; code=AUTHORITY_CODE; name=AUTHORITY_NAME
        }
    }
    ; Camp = list:{
        ; map:{topComment=陣営; codeType=String}
        ; map:{
            ; table=CAMP
            ; code=CAMP_CODE; name=CAMP_NAME
        }
    }
    ; VillageStatus = list:{
        ; map:{topComment=村ステータス; codeType=String}
        ; map:{
            ; table=VILLAGE_STATUS
            ; code=VILLAGE_STATUS_CODE; name=VILLAGE_STATUS_NAME
        }
    }
    ; Skill = list:{
        ; map:{
            ; topComment=役職; codeType=String
	        	; groupingMap = map:{
	        		; availableWerewolfSay = map:{
	        			; groupComment=囁き可能
	        			; elementList= list:{人狼;呪狼;智狼;C国狂人}
	        		}
	        		; hasDivineAbility = map:{
	        			; groupComment=占い能力を持つ
	        			; elementList= list:{占い師;賢者;占星術師}
	        		}
	        		; hasSkillPsychicAbility = map:{
	        			; groupComment=役職霊能能力を持つ
	        			; elementList= list:{導師;魔神官}
	        		}
	        		; hasAttackAbility = map:{
	        			; groupComment=襲撃能力を持つ
	        			; elementList= list:{人狼;呪狼;智狼}
	        		}
	        		; hasMadmanAbility = map:{
	        			; groupComment=狂人能力を持つ
	        			; elementList= list:{C国狂人;狂人;狂信者;魔神官}
	        		}
	        		; hasDisturbAbility = map:{
	        			; groupComment=徘徊能力を持つ
	        			; elementList= list:{C国狂人;狂人;狂信者;魔神官;妖狐}
	        		}
	        		; noDeadByAttack = map:{
	        			; groupComment=襲撃されても死なない
	        			; elementList= list:{妖狐;爆弾魔}
	        		}
	        	}
        }
        ; map:{
            ; table=SKILL
            ; code=SKILL_CODE; name=SKILL_NAME
            ; subItemMap=map:{
            	    ; order=DISP_ORDER
            	    ; campCode=CAMP_CODE
            	    ; skill_short_name=SKILL_SHORT_NAME
			}
        }
    }
    ; MessageType = list:{
        ; map:{topComment=メッセージ種別; codeType=String}
        ; map:{
            ; table=MESSAGE_TYPE
            ; code=MESSAGE_TYPE_CODE; name=MESSAGE_TYPE_NAME
        }
    }
    ; DeadReason = list:{
        ; map:{topComment=死亡理由; codeType=String}
        ; map:{
            ; table=DEAD_REASON
            ; code=DEAD_REASON_CODE; name=DEAD_REASON_NAME
        }
    }
    ; AbilityType = list:{
        ; map:{topComment=能力種別; codeType=String}
        ; map:{
            ; table=ABILITY_TYPE
            ; code=ABILITY_TYPE_CODE; name=ABILITY_TYPE_NAME
        }
    }
    ; AllowedSecretSay = list:{
        ; map:{topComment=秘話可能範囲; codeType=String}
        ; map:{
            ; table=ALLOWED_SECRET_SAY
            ; code=ALLOWED_SECRET_SAY_CODE; name=ALLOWED_SECRET_SAY_NAME
        }
    }
    ; FaceType = list:{
        ; map:{topComment=表情種別; codeType=String}
        ; map:{
            ; table=FACE_TYPE
            ; code=FACE_TYPE_CODE; name=FACE_TYPE_NAME
        }
    }
}
# ----------------/